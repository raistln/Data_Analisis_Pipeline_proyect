{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import sidetable\n",
    "import os\n",
    "from fpdf import FPDF\n",
    "import dataframe_image as dfi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "def info_df(df): \n",
    "    name = {\"Name\":[]}\n",
    "    non_null = {\"Non_null\":[]}\n",
    "    dtypes = {\"Dtype\":[]}\n",
    "    number = {\"Nº\":[]}\n",
    "    null_per = {\"%_of_null\": []}\n",
    "    num = 1\n",
    "    for col in df.columns:\n",
    "        number[\"Nº\"].append(num)\n",
    "        name[\"Name\"].append(col)\n",
    "        non_null[\"Non_null\"].append(df[col].notnull().sum())\n",
    "        null_per[\"%_of_null\"].append(round(100*df[col].isnull().sum()/df.shape[0],1))\n",
    "        dtypes[\"Dtype\"].append(df[col].dtype)\n",
    "        num += 1\n",
    "    info_df = pd.DataFrame(dict(**number,**name,**non_null,**null_per,**dtypes)).set_index(\"Nº\")\n",
    "    return info_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def first_transformation_report(df):\n",
    "    instant_df = pd.DataFrame()\n",
    "    cols = df.columns\n",
    "    for col in cols:\n",
    "        missing = df[col].isnull()\n",
    "        num_missing = np.sum(missing)\n",
    "\n",
    "        if num_missing > 0:\n",
    "            instant_df[f\"{col}_is_missing\"] = missing\n",
    "        else:\n",
    "            instant_df[f\"{col}_is_missing\"] = 0\n",
    "\n",
    "    is_missing_cols = [col for col in instant_df.columns if \"is_missing\" in col]\n",
    "    instant_df[\"num_missing\"] = instant_df[is_missing_cols].sum(axis = 1)\n",
    "    if len(cols) < 30:\n",
    "        colors = [\"#000099\", \"#ffff00\"]\n",
    "        sns.heatmap(df[cols].isnull(), cmap=sns.color_palette(colors))\n",
    "    else:\n",
    "        instant_df[\"num_missing\"].value_counts().reset_index().sort_values(by=\"index\").plot.bar(x = \"index\", y = \"num_missing\")\n",
    "    plt.savefig(\"nulls.png\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_num(col):\n",
    "    Q1 = df[col].describe()[4]\n",
    "    Q3 = df[col].describe()[6]\n",
    "    figure , axes = plt.subplots(nrows=1, ncols=2)\n",
    "    axes[0].hist(df[col], bins=100)\n",
    "    axes[1].hist(df[col][(df[col]>Q1) & (df[col]<Q3)], bins=100)\n",
    "    plt.savefig(f\"{col}.png\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_cat(col):\n",
    "    dic = dict(df[col].value_counts())\n",
    "    bars = plt.barh(list(dic.keys()), dic.values(), color = \"tab:green\")\n",
    "    bars[0].set_color(\"r\")\n",
    "    plt.gca().invert_yaxis()\n",
    "    plt.savefig(f\"{col}.png\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def column_analisis(col):\n",
    "    a = df[col].describe()\n",
    "    b = df.stb.freq([col])\n",
    "    if df[col].dtype == \"float64\":\n",
    "        plot_num(col)\n",
    "    elif df[col].dtype.name == \"category\":\n",
    "        plot_cat(col)\n",
    "    return a, b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "\n",
    "title = 'Data Analisis Pipeline Report'\n",
    "\n",
    "class PDF(FPDF):\n",
    "    def header(self):\n",
    "        # Arial bold 15\n",
    "        self.set_font('Arial', 'B', 15)\n",
    "        # Calcular ancho del texto (title) y establecer posición\n",
    "        w = self.get_string_width(title) + 6\n",
    "        self.set_x((210 - w) / 2)\n",
    "        # Colores del marco, fondo y texto\n",
    "        self.set_draw_color(0, 80, 180)\n",
    "        self.set_fill_color(143, 220, 154)\n",
    "        self.set_text_color(1, 1, 1)\n",
    "        # Grosor del marco (1 mm)\n",
    "        self.set_line_width(1)\n",
    "        # Titulo\n",
    "        self.cell(w, 9, title, 1, 1, 'C', 1)\n",
    "        # Salto de línea\n",
    "        self.ln(10)\n",
    "\n",
    "    def footer(self):\n",
    "        # Posición a 1.5 cm desde abajo\n",
    "        self.set_y(-15)\n",
    "        # Arial italic 8\n",
    "        self.set_font('Arial', 'I', 8)\n",
    "        # Color de texto en gris\n",
    "        self.set_text_color(128)\n",
    "        # Numero de pagina\n",
    "        self.cell(0, 10, 'Page ' + str(self.page_no()), 0, 0, 'C')\n",
    "\n",
    "    def chapter_title(self, num, label):\n",
    "        # Arial 12\n",
    "        self.set_font('Arial', '', 14)\n",
    "        # Color de fondo\n",
    "        self.set_fill_color(200, 220, 255)\n",
    "        # Titulo\n",
    "        self.cell(0, 6, 'Chapter %d : %s' % (num, label), 0, 1, 'L', 1)\n",
    "        # Salto de línea\n",
    "        self.ln(4)\n",
    "        \n",
    "    def print_chapter(self, num, title):\n",
    "        self.add_page()\n",
    "        self.chapter_title(num, title)\n",
    "        #self.chapter_body(name)\n",
    "        \n",
    "    def print_columns(self, num, title):\n",
    "        self.set_font('Arial', '', 14)\n",
    "        self.set_fill_color(150, 220, 255)\n",
    "        self.cell(0, 6, 'Column %d : %s' % (num, title), 0, 1, 'L', 1)\n",
    "        # Salto de línea\n",
    "        self.ln(4)\n",
    "        \n",
    "    def chapter_body(self, df):\n",
    "        self.set_font('Arial', '', 14)\n",
    "        self.df = df\n",
    "        num = 1\n",
    "        for col in self.df.columns:\n",
    "            if df[col].dtype == \"float64\":\n",
    "                self.add_page()\n",
    "                self.set_font('Times', '', 12)\n",
    "                self.ln()\n",
    "                self.print_columns(num, col)\n",
    "                stats, table = column_analisis(col)\n",
    "                top = self.y -10 \n",
    "                offset = self.x + 50\n",
    "                self.cell(40, 10,  f\"mean   = {round(stats[1],2)}\",0,1,\"L\",1)\n",
    "                self.cell(40, 10,  f\"median = {round(stats[5],2)}\",0,1,\"L\",1)\n",
    "                self.cell(40, 10,  f\"std    = {round(stats[2],2)}\",0,1,\"L\",1)\n",
    "                self.cell(40, 10,  f\"min    = {round(stats[3],2)}\",0,1,\"L\",1)\n",
    "                self.cell(40, 10,  f\"Q1     = {round(stats[4],2)}\",0,1,\"L\",1)\n",
    "                self.cell(40, 10,  f\"Q3     = {round(stats[6],2)}\",0,1,\"L\",1)\n",
    "                self.cell(40, 10,  f\"max    = {round(stats[7],2)}\",0,1,\"L\",1)\n",
    "                self.cell(40,10)\n",
    "                self.image(f\"{col}.png\", offset, top)\n",
    "                self.y = top\n",
    "                self.x = offset\n",
    "\n",
    "            elif df[col].dtype.name == \"category\":\n",
    "                self.add_page()\n",
    "                self.set_font('Times', '', 12)\n",
    "                self.ln()\n",
    "                self.print_columns(num, col)\n",
    "                stats, table = column_analisis(col)\n",
    "                dfi.export(table,\"table.png\")\n",
    "                self.image(f\"table.png\")\n",
    "                self.image(f\"{col}.png\")\n",
    "            num += 1\n",
    "            \n",
    "    def first_chapter_body(self, df):\n",
    "        self.df = df\n",
    "        df_info = info_df(self.df)\n",
    "        first_transformation_report(df)\n",
    "        dfi.export(df_info,\"df_info.png\")\n",
    "        self.image(\"df_info.png\", w = 180, h = 260)\n",
    "        self.image(\"nulls.png\", x = 100)\n",
    "    \n",
    "    def last_chapter(self, df):\n",
    "        self.add_page(\"L\")\n",
    "        self.set_font('Times', '', 12)\n",
    "        self.ln()\n",
    "        self.df = df\n",
    "        dfi.export(self.df.tail(), \"tail_df.png\")\n",
    "        dfi.export(self.df.head(), \"head_df.png\")\n",
    "        self.image(\"head_df.png\", w = 260, h = 180)\n",
    "        self.image(\"tail_df.png\", w = 260, h = 180)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def pdf_report(df):   \n",
    "    pdf = PDF()\n",
    "    pdf.set_title(title = 'Data Analisis Pipeline Report')\n",
    "    pdf.set_author('Samuel Martín')\n",
    "    pdf.print_chapter(1, 'Global Overview')\n",
    "    pdf.first_chapter_body(df)\n",
    "    pdf.print_chapter(2, 'Columns Analisis')\n",
    "    pdf.chapter_body(df)\n",
    "    pdf.print_chapter(3, \"Head and Tail\")\n",
    "    pdf.last_chapter(df)\n",
    "    pdf.output('../OUTPUT/Dataframe_clean_analisis.pdf', 'F')\n",
    "    list(map(lambda x: os.remove(x), list(filter(lambda x: x.endswith(\".png\"), os.listdir()))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
